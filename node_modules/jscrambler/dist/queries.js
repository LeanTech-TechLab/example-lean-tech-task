'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getApplication = getApplication;
exports.getApplicationSource = getApplicationSource;
exports.getApplicationProtections = getApplicationProtections;
exports.getApplicationProtectionsCount = getApplicationProtectionsCount;
exports.getTemplates = getTemplates;
exports.getApplications = getApplications;
exports.getProtection = getProtection;
var getApplicationDefaultFragments = '\n  _id,\n  name,\n  createdAt,\n  sources {\n    _id,\n    filename,\n    extension\n  }\n';
/**
 * Return one application by id.
 * The options params argument can be used to filter protections by version and limit the number of protections returned.
 * @param {String} id the application id
 * @param {fragment} fragments GraphQL fragment
 * @param {Array} params {{String}protectionsVersion, {Integer} protectionsNumber}
 */
function getApplication(applicationId) {
  var fragments = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : getApplicationDefaultFragments;
  var params = arguments[2];

  return {
    query: '\n      query getApplication ($applicationId: String!, $protectionsVersion: String, $protectionsLimit: Int) {\n        application(_id: $applicationId, protectionsVersion: $protectionsVersion, protectionsLimit: $protectionsLimit) {\n          ' + fragments + '\n        }\n      }\n    ',
    params: JSON.stringify(Object.assign({
      applicationId: applicationId
    }, params))
  };
}

var getApplicationSourceDefaultFragments = '\n  _id,\n  filename,\n  extension\n';

function getApplicationSource(sourceId) {
  var fragments = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : getApplicationSourceDefaultFragments;
  var limits = arguments[2];

  return {
    query: '\n      query getApplicationSource ($sourceId: String!, $contentLimit: Int, $transformedLimit: Int) {\n        applicationSource(_id: $sourceId, contentLimit: $contentLimit, transformedLimit: $transformedLimit) {\n          ' + fragments + '\n        }\n      }\n    ',
    params: JSON.stringify(Object.assign({
      sourceId: sourceId
    }, limits))
  };
}

var getApplicationProtectionsDefaultFragments = '\n  _id,\n  sources,\n  parameters,\n  finishedAt,\n  randomizationSeed\n';

function getApplicationProtections(applicationId, params) {
  var fragments = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : getApplicationProtectionsDefaultFragments;

  return {
    query: '\n      query getApplicationProtections ($applicationId: String!, $sort: String, $order: String, $limit: Int, $page: Int) {\n        applicationProtections(_id: $applicationId, sort: $sort, order: $order, limit: $limit, page: $page) {\n          ' + fragments + '\n        }\n      }\n    ',
    params: JSON.stringify(Object.assign({
      applicationId: applicationId
    }, params))
  };
}

var getApplicationProtectionsCountDefaultFragments = '\n  count\n';

function getApplicationProtectionsCount(applicationId) {
  var fragments = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : getApplicationProtectionsCountDefaultFragments;

  return {
    query: '\n      query getApplicationProtectionsCount ($applicationId: String!) {\n        applicationProtectionsCount(_id: $applicationId) {\n          ' + fragments + '\n        }\n      }\n    ',
    params: JSON.stringify({
      applicationId: applicationId
    })
  };
}

var getTemplatesDefaultFragments = '\n  _id,\n  parameters\n';

function getTemplates() {
  var fragments = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : getTemplatesDefaultFragments;

  return {
    query: '\n      query getTemplates {\n        templates {\n          ' + fragments + '\n        }\n      }\n    ',
    params: '{}'
  };
}

var getApplicationsDefaultFragments = '\n  _id,\n  name,\n  protections,\n  parameters\n';
/**
 * Return all applications.
 * The options params argument can be used to filter protections by version and limit the number of protections returned.
 * @param {fragment} fragments GraphQL fragment
 * @param {Array} params {{String}protectionsVersion, {Integer} protectionsNumber}
 */
function getApplications() {
  var fragments = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : getApplicationsDefaultFragments;
  var params = arguments[1];

  return {
    query: '\n      query getApplications($protectionsVersion:String, $protectionsLimit: Int) {\n        applications(protectionsVersion: $protectionsVersion, protectionsLimit: $protectionsLimit) {\n          ' + fragments + '\n        }\n      }\n    ',
    params: JSON.stringify(Object.assign({}, params))
  };
}

var getProtectionDefaultFragments = {
  application: '\n    name\n  ',
  applicationProtection: '\n    _id,\n    state,\n    bail,\n    deprecations {\n      type,\n      entity\n    },\n    errorMessage,\n    sources {\n      filename,\n      errorMessages {\n        message,\n        line,\n        column,\n        fatal\n      }\n    }\n  '
};

function getProtection(applicationId, protectionId) {
  var fragments = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : getProtectionDefaultFragments;

  return {
    query: '\n      query getProtection ($applicationId: String!, $protectionId: String!) {\n        application (_id: $applicationId) {\n          ' + fragments.application + '\n        }\n        applicationProtection (_id: $protectionId) {\n          ' + fragments.applicationProtection + '\n        }\n      }\n    ',
    params: JSON.stringify({
      applicationId: applicationId,
      protectionId: protectionId
    })
  };
}