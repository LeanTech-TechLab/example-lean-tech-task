#!/usr/bin/env node
'use strict';

var _commander = require('commander');

var _commander2 = _interopRequireDefault(_commander);

var _lodash = require('lodash.defaults');

var _lodash2 = _interopRequireDefault(_lodash);

var _glob = require('glob');

var _glob2 = _interopRequireDefault(_glob);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _filesizeParser = require('filesize-parser');

var _filesizeParser2 = _interopRequireDefault(_filesizeParser);

var _config3 = require('../config');

var _config4 = _interopRequireDefault(_config3);

var _ = require('../');

var _2 = _interopRequireDefault(_);

var _cli = require('../cli');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

var debug = !!process.env.DEBUG;
var validateBool = function validateBool(option) {
  return function (val) {
    if (!/^(true|false)$/i.test(val)) {
      console.error('*' + option + '* requires a <bool> value.');
      process.exit(1);
    }
    return val.toLowerCase();
  };
};

var validateCodeHardeningThreshold = function validateCodeHardeningThreshold(val) {
  var inBytes = void 0;
  try {
    inBytes = (0, _filesizeParser2.default)(val);
  } catch (e) {
    console.error('*code-hardening-threshold* requires a valid <threshold> value. Format: {number}{unit="b,kb,mb"}. Example: --code-hardening-threshold 200kb');
    process.exit(1);
  }
  return inBytes;
};

var validateProfilingDataMode = function validateProfilingDataMode(mode) {
  var availableModes = ['automatic', 'annotations', 'off'];

  var normalizedMode = mode.toLowerCase();

  if (!availableModes.includes(normalizedMode)) {
    console.error('*profiling-data-mode* requires one of the following modes: {' + availableModes.toString() + '}. Example: --profiling-data-mode ' + availableModes[0]);
    process.exit(1);
  }

  return normalizedMode;
};

var availableEnvironments = ['node', 'browser', 'isomorphic', 'automatic'];
var validateForceAppEnvironment = function validateForceAppEnvironment(env) {
  var normalizeEnvironment = env.toLowerCase();

  if (!availableEnvironments.includes(normalizeEnvironment)) {
    console.error('*force-app-environment* requires one of the following values: {' + availableEnvironments.toString() + '}. Example: --force-app-environment ' + availableEnvironments[0]);
    process.exit(1);
  }

  return normalizeEnvironment;
};

_commander2.default.version(require('../../package.json').version).usage('[options] <file ...>').option('-a, --access-key <accessKey>', 'Access key').option('-c, --config <config>', 'Jscrambler configuration options').option('-H, --host <host>', 'Hostname').option('-i, --application-id <id>', 'Application ID').option('-o, --output-dir <dir>', 'Output directory').option('-p, --port <port>', 'Port').option('--base-path <path>', 'Base Path').option('--protocol <protocol>', 'Protocol (http or https)').option('--cafile <path>', 'Internal certificate authority').option('-C, --cwd <dir>', 'Current Working Directory').option('-s, --secret-key <secretKey>', 'Secret key').option('-m, --source-maps <id>', 'Download source maps').option('-R, --randomization-seed <seed>', 'Set randomization seed').option('--instrument', 'Instrument file(s) before start profiling. ATTENTION: previous profiling information will be deleted').option('--start-profiling', 'Starts profiling (assumes an already instrumented application)').option('--stop-profiling', 'Stops profiling').option('--code-hardening-threshold <threshold>', 'Set code hardening file size threshold. Format: {value}{unit="b,kb,mb"}. Example: 200kb', validateCodeHardeningThreshold).option('--recommended-order <bool>', 'Use recommended order', validateBool('recommended-order')).option('-W, --werror <bool>', 'Set werror flag value (default: true)', validateBool('werror')).option('--utc <bool>', 'Set UTC as the request time zone. Otherwise it uses the local time zone (default: true)', validateBool('utc')).option('--tolerate-minification <bool>', 'Don\'t detect minification as malicious tampering (default: true)', validateBool('tolerate-minification')).option('--use-profiling-data <bool>', '(version 6.2 only) Protection should use the existing profiling data (default: true)', validateBool('use-profiling-data')).option('--profiling-data-mode <mode>', '(version 6.3 and above) Select profiling mode (default: automatic)', validateProfilingDataMode).option('--remove-profiling-data', 'Removes the current application profiling information').option('--use-app-classification <bool>', '(version 6.3 and above) Protection should use Application Classification metadata when protecting (default: true)', validateBool('--use-app-classification')).option('--input-symbol-table <file>', '(version 6.3 and above) Protection should use symbol table when protecting. (default: no file)').option('--output-symbol-table <id>', '(version 6.3 and above) Download output symbol table (json)').option('--jscramblerVersion <version>', 'Use a specific Jscrambler version').option('--debugMode', 'Protect in debug mode').option('--skip-sources', 'Prevent source files from being updated').option('--force-app-environment <environment>', '(version 7.1 and above) Override application\'s environment detected automatically. Possible values: ' + availableEnvironments.toString(), validateForceAppEnvironment).parse(process.argv);

var globSrc = void 0,
    filesSrc = void 0,
    config = void 0;

// If -c, --config file was provided
if (_commander2.default.config) {
  // We're using `commander` (CLI) as the source of all truths, falling back to
  // the `config` provided by the file passed as argument
  config = require(_path2.default.resolve(_commander2.default.config, '.'));
} else {
  config = {};
}

config.accessKey = _commander2.default.accessKey || (config.keys ? config.keys.accessKey : undefined);
config.secretKey = _commander2.default.secretKey || (config.keys ? config.keys.secretKey : undefined);
config.host = _commander2.default.host || config.host;
config.port = _commander2.default.port || config.port;
config.basePath = _commander2.default.basePath || config.basePath;
config.port = config.port && parseInt(config.port);
config.protocol = _commander2.default.protocol || config.protocol;
config.cafile = _commander2.default.cafile || config.cafile;
config.filesDest = _commander2.default.outputDir || config.filesDest;
config.applicationId = _commander2.default.applicationId || config.applicationId;
config.randomizationSeed = _commander2.default.randomizationSeed || config.randomizationSeed;
config.cwd = _commander2.default.cwd || config.cwd;
config.useRecommendedOrder = _commander2.default.recommendedOrder ? _commander2.default.recommendedOrder !== 'false' : config.useRecommendedOrder;
config.tolerateMinification = _commander2.default.tolerateMinification ? _commander2.default.tolerateMinification !== 'false' : config.tolerateMinification;
config.werror = _commander2.default.werror ? _commander2.default.werror !== 'false' : config.werror;
config.jscramblerVersion = _commander2.default.jscramblerVersion || config.jscramblerVersion;
config.inputSymbolTable = _commander2.default.inputSymbolTable || config.inputSymbolTable;
config.removeProfilingData = _commander2.default.removeProfilingData;
config.skipSources = _commander2.default.skipSources;
config.debugMode = _commander2.default.debugMode || config.debugMode;

// handle codeHardening = 0
if (typeof _commander2.default.codeHardeningThreshold === 'undefined') {
  config.codeHardeningThreshold = config.codeHardeningThreshold ? validateCodeHardeningThreshold(config.codeHardeningThreshold) : undefined;
} else {
  config.codeHardeningThreshold = _commander2.default.codeHardeningThreshold;
}

if (_commander2.default.profilingDataMode) {
  config.profilingDataMode = _commander2.default.profilingDataMode;
} else {
  config.profilingDataMode = config.profilingDataMode ? validateProfilingDataMode(config.profilingDataMode) : undefined;
}

if (_commander2.default.utc) {
  config.utc = _commander2.default.utc !== 'false';
}

if (_commander2.default.useProfilingData) {
  config.useProfilingData = _commander2.default.useProfilingData !== 'false';
}

if (_commander2.default.useAppClassification) {
  config.useAppClassification = _commander2.default.useAppClassification !== 'false';
}

if (config.jscramblerVersion && !/^(?:\d+\.\d+(?:-f)?|stable|latest)$/.test(config.jscramblerVersion)) {
  console.error('The Jscrambler version must be in the form of $major.$minor or the words stable and latest. (e.g. 5.2, stable, latest)');
  process.exit(1);
}

if (_commander2.default.forceAppEnvironment) {
  config.forceAppEnvironment = _commander2.default.forceAppEnvironment;
} else {
  config.forceAppEnvironment = config.forceAppEnvironment ? validateForceAppEnvironment(config.forceAppEnvironment) : undefined;
}

config = (0, _lodash2.default)(config, _config4.default);

if (config.codeHardeningThreshold) {
  config.codeHardeningThreshold = validateCodeHardeningThreshold(config.codeHardeningThreshold);
}

if (config.profilingDataMode) {
  config.profilingDataMode = validateProfilingDataMode(config.profilingDataMode);
}

globSrc = config.filesSrc;
// If src paths have been provided
if (_commander2.default.args.length > 0) {
  globSrc = _commander2.default.args;
}

if (globSrc && globSrc.length) {
  filesSrc = [];
  // Iterate `globSrc` to build a list of source files into `filesSrc`
  for (var i = 0, l = globSrc.length; i < l; i += 1) {
    // Calling sync `glob` because async is pointless for the CLI use case
    // (as of now at least)

    // If the user is providing a zip alongside more files
    if (_path2.default.extname(globSrc[i]) === '.zip' && globSrc.length > 1) {
      console.error('Please provide either a zip file containing all your source files or use the minimatch syntax');
      process.exit(1);
    }

    var tmpGlob = _glob2.default.sync(globSrc[i], {
      dot: true
    });

    if (config.werror && tmpGlob.length === 0) {
      console.error('Pattern "' + globSrc[i] + '" doesn\'t match any files.');
      process.exit(1);
    }

    if (debug) {
      if (tmpGlob.length === 0) {
        console.log('Pattern "' + globSrc[i] + '" doesn\'t match any files. Will be ignored.');
      } else {
        console.log('Pattern "' + globSrc[i] + '" matched the following files:');
        tmpGlob.forEach(function (file) {
          console.log('    ' + file);
        });
      }
    }
    filesSrc = filesSrc.concat(tmpGlob);
  }
  if (filesSrc.length === 0) {
    console.error('No files matched.');
    process.exit(1);
  }
} else if (debug) {
  console.log('No filesSrc provided. Using the ones in the application (if any).');
}

var _config2 = config,
    applicationId = _config2.applicationId,
    accessKey = _config2.accessKey,
    secretKey = _config2.secretKey,
    filesDest = _config2.filesDest,
    host = _config2.host,
    port = _config2.port,
    basePath = _config2.basePath,
    protocol = _config2.protocol,
    cafile = _config2.cafile,
    applicationTypes = _config2.applicationTypes,
    languageSpecifications = _config2.languageSpecifications,
    areSubscribersOrdered = _config2.areSubscribersOrdered,
    cwd = _config2.cwd,
    randomizationSeed = _config2.randomizationSeed,
    _config2$sourceMaps = _config2.sourceMaps,
    sourceMaps = _config2$sourceMaps === undefined ? false : _config2$sourceMaps,
    useRecommendedOrder = _config2.useRecommendedOrder,
    werror = _config2.werror,
    tolerateMinification = _config2.tolerateMinification,
    jscramblerVersion = _config2.jscramblerVersion,
    debugMode = _config2.debugMode,
    proxy = _config2.proxy,
    codeHardeningThreshold = _config2.codeHardeningThreshold,
    useProfilingData = _config2.useProfilingData,
    profilingDataMode = _config2.profilingDataMode,
    browsers = _config2.browsers,
    useAppClassification = _config2.useAppClassification,
    removeProfilingData = _config2.removeProfilingData,
    skipSources = _config2.skipSources,
    inputSymbolTable = _config2.inputSymbolTable,
    utc = _config2.utc,
    entryPoint = _config2.entryPoint,
    excludeList = _config2.excludeList,
    forceAppEnvironment = _config2.forceAppEnvironment;


var params = (0, _cli.mergeAndParseParams)(_commander2.default, config.params);

var incompatibleOptions = ['sourceMaps', 'instrument', 'startProfiling', 'stopProfiling'];
var usedIncompatibleOptions = [];
var _iteratorNormalCompletion = true;
var _didIteratorError = false;
var _iteratorError = undefined;

try {
  for (var _iterator = incompatibleOptions[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
    var incompatibleOption = _step.value;

    if (_commander2.default[incompatibleOption]) {
      usedIncompatibleOptions.push(incompatibleOption);
    }
  }
} catch (err) {
  _didIteratorError = true;
  _iteratorError = err;
} finally {
  try {
    if (!_iteratorNormalCompletion && _iterator.return) {
      _iterator.return();
    }
  } finally {
    if (_didIteratorError) {
      throw _iteratorError;
    }
  }
}

if (usedIncompatibleOptions.length > 1) {
  console.error('Using mutually exclusive options:', usedIncompatibleOptions);
  process.exit(1);
}

var clientSettings = {
  keys: {
    accessKey: accessKey,
    secretKey: secretKey
  },
  host: host,
  port: port,
  basePath: basePath,
  protocol: protocol,
  cafile: cafile,
  proxy: proxy,
  utc: utc,
  jscramblerVersion: jscramblerVersion
};

if (_commander2.default.sourceMaps) {
  // Go, go, go download
  _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.prev = 0;
            _context.next = 3;
            return _2.default.downloadSourceMaps(Object.assign({}, clientSettings, {
              filesDest: filesDest,
              filesSrc: filesSrc,
              protectionId: _commander2.default.sourceMaps
            }));

          case 3:
            _context.next = 9;
            break;

          case 5:
            _context.prev = 5;
            _context.t0 = _context['catch'](0);

            console.error(debug ? _context.t0 : _context.t0.message || _context.t0);
            process.exit(1);

          case 9:
          case 'end':
            return _context.stop();
        }
      }
    }, _callee, undefined, [[0, 5]]);
  }))();
} else if (_commander2.default.outputSymbolTable) {
  // Go, go, go download
  _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {
    return regeneratorRuntime.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            _context2.prev = 0;
            _context2.next = 3;
            return _2.default.downloadSymbolTable(Object.assign({}, clientSettings, {
              filesDest: filesDest,
              filesSrc: filesSrc,
              protectionId: _commander2.default.outputSymbolTable
            }));

          case 3:
            _context2.next = 9;
            break;

          case 5:
            _context2.prev = 5;
            _context2.t0 = _context2['catch'](0);

            console.error(debug ? _context2.t0 : _context2.t0.message || _context2.t0);
            process.exit(1);

          case 9:
          case 'end':
            return _context2.stop();
        }
      }
    }, _callee2, undefined, [[0, 5]]);
  }))();
} else if (_commander2.default.instrument) {
  _2.default.instrumentAndDownload(Object.assign({}, clientSettings, {
    applicationId: applicationId,
    filesSrc: filesSrc,
    filesDest: filesDest,
    skipSources: skipSources,
    cwd: cwd
  })).catch(function (error) {
    console.error(debug ? error : error.message || error);
    process.exit(1);
  });
} else if (_commander2.default.startProfiling) {
  _2.default.setProfilingState(Object.assign({}, clientSettings, {
    applicationId: applicationId
  }), 'RUNNING', 'STARTED', "Exercise your application and when you're finished run *--stop-profiling* command").catch(function (error) {
    console.error(debug ? error : error.message || error);
    process.exit(1);
  });
} else if (_commander2.default.stopProfiling) {
  _2.default.setProfilingState(Object.assign({}, clientSettings, {
    applicationId: applicationId
  }), 'READY', 'STOPPED', 'Protect your application with 2 extra arguments: *--profiling-data-mode automatic* and *--skip-sources*').catch(function (error) {
    console.error(debug ? error : error.message || error);
    process.exit(1);
  });
} else {
  // Go, go, go
  _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {
    var protectAndDownloadOptions;
    return regeneratorRuntime.wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            protectAndDownloadOptions = Object.assign({}, clientSettings, {
              applicationId: applicationId,
              filesSrc: filesSrc,
              filesDest: filesDest,
              params: params,
              applicationTypes: applicationTypes,
              languageSpecifications: languageSpecifications,
              areSubscribersOrdered: areSubscribersOrdered,
              cwd: cwd,
              sourceMaps: sourceMaps,
              randomizationSeed: randomizationSeed,
              useRecommendedOrder: useRecommendedOrder,
              tolerateMinification: tolerateMinification,
              debugMode: debugMode,
              codeHardeningThreshold: codeHardeningThreshold,
              useProfilingData: useProfilingData,
              profilingDataMode: profilingDataMode,
              browsers: browsers,
              useAppClassification: useAppClassification,
              skipSources: skipSources,
              removeProfilingData: removeProfilingData,
              inputSymbolTable: inputSymbolTable,
              entryPoint: entryPoint,
              excludeList: excludeList,
              forceAppEnvironment: forceAppEnvironment
            });
            _context3.prev = 1;

            if (typeof werror !== 'undefined') {
              protectAndDownloadOptions.bail = werror;
            }
            _context3.next = 5;
            return _2.default.protectAndDownload(protectAndDownloadOptions);

          case 5:
            _context3.next = 11;
            break;

          case 7:
            _context3.prev = 7;
            _context3.t0 = _context3['catch'](1);

            console.error(debug ? _context3.t0 : _context3.t0.message || _context3.t0);
            process.exit(1);

          case 11:
          case 'end':
            return _context3.stop();
        }
      }
    }, _callee3, undefined, [[1, 7]]);
  }))();
}