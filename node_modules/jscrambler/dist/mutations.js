'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

exports.createApplication = createApplication;
exports.duplicateApplication = duplicateApplication;
exports.removeApplication = removeApplication;
exports.removeProtection = removeProtection;
exports.cancelProtection = cancelProtection;
exports.updateApplication = updateApplication;
exports.unlockApplication = unlockApplication;
exports.addApplicationSource = addApplicationSource;
exports.updateApplicationSource = updateApplicationSource;
exports.removeSourceFromApplication = removeSourceFromApplication;
exports.createTemplate = createTemplate;
exports.removeTemplate = removeTemplate;
exports.updateTemplate = updateTemplate;
exports.createApplicationProtection = createApplicationProtection;
exports.applyTemplate = applyTemplate;

var _cleanupInputFields3 = require('./cleanup-input-fields');

var _cleanupInputFields4 = _interopRequireDefault(_cleanupInputFields3);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var createApplicationDefaultFragments = '\n  _id,\n  createdAt,\n  name\n';

function createApplication(data) {
  var fragments = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : createApplicationDefaultFragments;

  return {
    query: '\n      mutation createApplication ($data: ApplicationCreate!) {\n        createApplication(data: $data) {\n          ' + fragments + '\n        }\n      }\n    ',
    params: {
      data: data
    }
  };
}

var duplicateApplicationDefaultFragments = '\n  _id\n';

function duplicateApplication(id) {
  var fragments = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : duplicateApplicationDefaultFragments;

  return {
    query: '\n      mutation duplicateApplication ($_id: String!) {\n        duplicateApplication (_id: $_id) {\n          ' + fragments + '\n        }\n      }\n    ',
    params: {
      _id: id
    }
  };
}

var removeApplicationDefaultFragments = '\n  _id\n';

function removeApplication(id) {
  var fragments = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : removeApplicationDefaultFragments;

  return {
    query: '\n      mutation removeApplication ($_id: String!) {\n        removeApplication (_id: $_id) {\n          ' + fragments + '\n        }\n      }\n    ',
    params: {
      _id: id
    }
  };
}

var removeProtectionDefaultFragments = '\n  _id\n';

function removeProtection(id, appId) {
  var fragments = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : removeProtectionDefaultFragments;

  return {
    query: '\n      mutation removeProtection ($_id: String!, $applicationId: String!) {\n        removeProtection (_id: $_id, applicationId: $applicationId) {\n          ' + fragments + '\n        }\n      }\n    ',
    params: {
      _id: id,
      applicationId: appId
    }
  };
}

var cancelProtectionDefaultFragments = '\n  _id\n';

function cancelProtection(id, appId) {
  var fragments = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : cancelProtectionDefaultFragments;

  return {
    query: '\n      mutation cancelProtection ($_id: String!, $applicationId: String!) {\n        cancelProtection (_id: $_id, applicationId: $applicationId) {\n          ' + fragments + '\n        }\n      }\n    ',
    params: {
      _id: id,
      applicationId: appId
    }
  };
}

var updateApplicationDefaultFragments = '\n  _id,\n  createdAt,\n  name\n';

function updateApplication(application) {
  var fragments = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : updateApplicationDefaultFragments;

  var applicationId = application._id;
  delete application._id;

  return {
    query: '\n      mutation updateApplication ($applicationId: String!, $data: ApplicationUpdate!) {\n        updateApplication (_id: $applicationId, data: $data) {\n          ' + fragments + '\n        }\n      }\n    ',
    params: {
      applicationId: applicationId,
      data: application
    }
  };
}

var unlockApplicationDefaultFragments = '\n  _id,\n  createdAt,\n  name\n';

function unlockApplication(application) {
  var fragments = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : unlockApplicationDefaultFragments;

  return {
    query: '\n      mutation unlockApplication ($applicationId: String!) {\n        unlockApplication (_id: $applicationId) {\n          ' + fragments + '\n        }\n      }\n    ',
    params: {
      applicationId: application._id
    }
  };
}

var addApplicationSourceDefaultFragments = '\n  _id,\n  filename,\n  extension\n';

function addApplicationSource(applicationId, data) {
  var fragments = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : addApplicationSourceDefaultFragments;

  return {
    query: '\n      mutation addSourceToApplication ($applicationId: String!, $data: ApplicationSourceCreate!) {\n        addSourceToApplication(applicationId: $applicationId, data: $data) {\n          ' + fragments + '\n        }\n      }\n    ',
    params: {
      applicationId: applicationId,
      data: data
    }
  };
}

var updateApplicationSourceDefaultFragments = '\n  _id,\n  filename,\n  extension\n';

function updateApplicationSource(applicationSource) {
  var fragments = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : updateApplicationSourceDefaultFragments;

  var sourceId = applicationSource._id;
  delete applicationSource._id;

  return {
    query: '\n      mutation updateApplicationSource ($sourceId: String!, $data: ApplicationSourceUpdate!) {\n        updateApplicationSource(_id: $sourceId, data: $data) {\n          ' + fragments + '\n        }\n      }\n    ',
    params: {
      sourceId: sourceId,
      data: applicationSource
    }
  };
}

var removeSourceFromApplicationDefaultFragments = '\n  _id,\n  sources {\n    filename\n  }\n';

function removeSourceFromApplication(filename, applicationId) {
  var fragments = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : removeSourceFromApplicationDefaultFragments;

  return {
    query: '\n      mutation removeSource ($filename: String!, $applicationId: String!) {\n        removeSource (filename: $filename, applicationId: $applicationId) {\n          ' + fragments + '\n        }\n      }\n    ',
    params: {
      filename: filename,
      applicationId: applicationId
    }
  };
}

var createTemplateDefaultFragments = '\n  _id,\n  name,\n  description,\n  parameters\n';

function createTemplate(template) {
  var fragments = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : createTemplateDefaultFragments;

  return {
    query: '\n      mutation createTemplate ($data: TemplateInput!) {\n        createTemplate (data: $data) {\n          ' + fragments + '\n        }\n      }\n    ',
    params: {
      data: template
    }
  };
}

var removeTemplateDefaultFragments = '\n  _id\n';

function removeTemplate(id) {
  var fragments = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : removeTemplateDefaultFragments;

  return {
    query: '\n      mutation removeTemplate ($_id: String!) {\n        removeTemplate (_id: $_id) {\n          ' + fragments + '\n        }\n      }\n    ',
    params: {
      _id: id
    }
  };
}

var updateTemplateDefaultFragments = '\n  _id,\n  parameters\n';

function updateTemplate(template) {
  var fragments = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : updateTemplateDefaultFragments;

  var templateId = template._id;
  delete template._id;

  return {
    query: '\n      mutation updateTemplate ($templateId: ID!, $data: TemplateInput!) {\n        updateTemplate (_id: $templateId, data: $data) {\n          ' + fragments + '\n        }\n      }\n    ',
    params: {
      templateId: templateId,
      data: template
    }
  };
}

var createProtectionDefaultFragments = '\n  _id,\n  state\n';

function createApplicationProtection(applicationId) {
  var _fragments = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : createProtectionDefaultFragments;

  var _options = arguments[2];
  var args = arguments[3];

  var fragments = _fragments;
  var options = _options;

  var _cleanupInputFields = (0, _cleanupInputFields4.default)(args, fragments, options);

  var _cleanupInputFields2 = _slicedToArray(_cleanupInputFields, 2);

  options = _cleanupInputFields2[0];
  fragments = _cleanupInputFields2[1];


  if (!args.some(function (f) {
    return f.name === 'options';
  })) {
    var _options2 = options,
        bail = _options2.bail,
        randomizationSeed = _options2.randomizationSeed;


    return {
      query: '\n      mutation createApplicationProtection ($applicationId: String!, $bail: Boolean, $randomizationSeed: String) {\n        createApplicationProtection (applicationId: $applicationId, bail: $bail, randomizationSeed: $randomizationSeed) {\n          ' + fragments + '\n        }\n      }\n    ',
      params: {
        applicationId: applicationId,
        bail: bail,
        randomizationSeed: randomizationSeed
      }
    };
  }

  // Check if createApplicationProtection supports "data" argument
  if (args.some(function (arg) {
    return arg.name === 'data';
  })) {
    return {
      query: '\n        mutation createApplicationProtection ($applicationId: String!, $data: ApplicationProtectionCreate) {\n          createApplicationProtection (applicationId: $applicationId, data: $data) {\n            ' + fragments + '\n          }\n        }\n      ',
      params: {
        applicationId: applicationId,
        data: options
      }
    };
  }

  return {
    query: '\n      mutation createApplicationProtection ($applicationId: String!, $options: JSON) {\n        createApplicationProtection (applicationId: $applicationId, options: $options) {\n          ' + fragments + '\n        }\n      }\n    ',
    params: {
      applicationId: applicationId,
      options: options
    }
  };
}

var applyTemplateDefaultFragments = '\n  _id,\n  parameters\n';

function applyTemplate(templateId, appId) {
  var fragments = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : applyTemplateDefaultFragments;

  return {
    query: '\n      mutation applyTemplate ($templateId: String!, $appId: String!) {\n        applyTemplate (templateId: $templateId, appId: $appId) {\n          ' + fragments + '\n        }\n      }\n    ',
    params: {
      templateId: templateId,
      appId: appId
    }
  };
}