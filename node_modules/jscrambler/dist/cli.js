'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.mergeAndParseParams = mergeAndParseParams;

var _lodash = require('lodash.clone');

var _lodash2 = _interopRequireDefault(_lodash);

var _snakeCase = require('snake-case');

var _snakeCase2 = _interopRequireDefault(_snakeCase);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Override params file changes with any specified command line options
// TODO Populate this list based on an external JSON
var isBoolFlag = {
  booleanToAnything: true,
  charToTernaryOperator: false,
  commaOperatorUnfolding: true,
  controlFlowFlattening: false,
  deadCodeInjection: true,
  dotToBracketNotation: true,
  duplicateLiteralsRemoval: false,
  extendPredicates: true,
  functionOutlining: true,
  functionReorder: true,
  identifiersRenaming: false,
  numberToString: true,
  propertyKeysObfuscation: true,
  propertyKeysReordering: true,
  regexObfuscation: true,
  stringConcealing: true,
  stringEncoding: true,
  stringSplitting: false,
  variableGrouping: true,
  assertionsRemoval: false,
  constantFolding: true,
  deadCodeElimination: true,
  debugCodeElimination: false,
  whitespaceRemoval: true,
  selfDefending: false,
  browserLock: false,
  dateLock: false,
  domainLock: false,
  osLock: false,
  preserveAnnotations: true
};

// Convert from command line option format to JScrambler API format.
function mergeAndParseParams(commander, params) {
  var finalParams = (0, _lodash2.default)(params || {});

  Object.keys(isBoolFlag).forEach(function (name) {
    if (commander[name] !== undefined) {
      var snakeCaseName = (0, _snakeCase2.default)(name);
      if (isBoolFlag[name] === true) {
        finalParams[snakeCaseName] = {
          status: 1
        };
      } else {
        finalParams[snakeCaseName] = commander[name];
      }
      if (typeof finalParams[snakeCaseName].status === 'undefined') {
        finalParams[snakeCaseName].status = 1;
      }
    }
  });

  return finalParams;
}